// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  GOOGLE
  KAKAO
  PHONE
  TEST
}

model User {
  id               String         @id @default(uuid())
  provider         Provider
  providerId       String
  password         String?
  fcmToken         String?
  address          Address[]
  alert            Alert[]
  productQnA       ProductQnA[]
  userAccount      UserAccount?
  product          Product[]
  favoriteProducts UserFavorite[]
  Declaration      Declaration[]
}

model UserAccount {
  id                         String                       @id @default(uuid())
  userId                     String                       @unique
  user                       User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  credit                     Int                          @default(0)
  walletAddress              String?
  userTokenBalancesOnProduct UserTokenBalancesOnProduct[]
  userMarketPurchase         UserMarketPurchase[]
}

model UserFavorite {
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([userId, productId])
}

model Address {
  id            String @id @default(uuid())
  userId        String
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  phone         String // +821012345678
  address       String
  detailAddress String @default("")
}

model Category {
  id                  String                @id @default(uuid())
  name                String                @unique
  categoriesOnProduct CategoriesOnProduct[]
}

enum AlertType {
  INFO
  PAYBACK
  FAILURE
  SYSTEM
}

model Alert {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  content   String
  type      AlertType
  createdAt DateTime  @default(now())
}

enum ProductType {
  FUNDING
  SELLING
}

model Product {
  id                         String                       @id @default(uuid())
  ownerId                    String
  user                       User                         @relation(fields: [ownerId], references: [id], onDelete: Restrict)
  name                       String
  image                      String?
  type                       ProductType                  @default(FUNDING)
  currentAmount              Int
  targetAmount               Int
  collectedAmount            Int                          @default(0)
  distributionPercent        Float
  fundingEndDate             DateTime
  marketEndDate              DateTime
  tokenAddress               String?
  productQnA                 ProductQnA[]
  fundingLog                 FundingLog[]
  categories                 CategoriesOnProduct[]
  userTokenBalancesOnProduct UserTokenBalancesOnProduct[]
  userFavorite               UserFavorite[]
  createdAt                  DateTime                     @default(now())
  userMarketPurchase         UserMarketPurchase[]
  productDetailImage         ProductDetailImage[]
}

model ProductDetailImage {
  id        Int     @id @default(autoincrement())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  image     String
  index     Int
}

model FundingLog {
  id                 Int                         @id @default(autoincrement())
  productId          String
  product            Product                     @relation(fields: [productId], references: [id], onDelete: Cascade)
  userTokenBalanceId String?
  userTokenBalance   UserTokenBalancesOnProduct? @relation(fields: [userTokenBalanceId], references: [id], onDelete: SetNull)
  amount             Int
  price              Int
  createdAt          DateTime                    @default(now())
}

model CategoriesOnProduct {
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([productId, categoryId])
}

enum ProductQnAAuthorType {
  BUYER
  SELLER
}

model ProductQnA {
  id         String               @id @default(uuid())
  productId  String
  product    Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  authorType ProductQnAAuthorType
  authorId   String?
  user       User?                @relation(fields: [authorId], references: [id], onDelete: SetNull)
  content    String
  createdAt  DateTime             @default(now())
}

model UserTokenBalancesOnProduct {
  id            String       @id @default(uuid())
  userAccountId String
  userAccount   UserAccount  @relation(fields: [userAccountId], references: [id], onDelete: Restrict)
  productId     String
  product       Product      @relation(fields: [productId], references: [id], onDelete: Restrict)
  token         Int          @default(0)
  createdAt     DateTime     @default(now())
  FundingLog    FundingLog[]
}

enum MarketPurchaseStatus {
  WAITING_DELIVERY
  ON_DELIVERY
  DELIVERED
}

model UserMarketPurchase {
  id            String               @id @default(uuid())
  userAccountId String
  userAccount   UserAccount          @relation(fields: [userAccountId], references: [id], onDelete: Cascade)
  productId     String
  product       Product              @relation(fields: [productId], references: [id], onDelete: NoAction)
  amount        Int
  price         Int
  phone         String
  address       String
  type          MarketPurchaseStatus @default(WAITING_DELIVERY)
  createdAt     DateTime             @default(now())
  Declaration   Declaration[]
}

enum DeclarationType {
  WRONG_PRODUCT
  MISSING_PRODUCT
  ETC
}

model Declaration {
  id         String             @id @default(uuid())
  userId     String
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchaseId String
  purchase   UserMarketPurchase @relation(fields: [purchaseId], references: [id], onDelete: Restrict)
  type       DeclarationType
  createdAt  DateTime           @default(now())
}
